{"ast":null,"code":"import _classCallCheck from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar Toolkit =\n/*#__PURE__*/\nfunction () {\n  function Toolkit() {\n    _classCallCheck(this, Toolkit);\n  }\n\n  _createClass(Toolkit, null, [{\n    key: \"splitArray\",\n    value: function splitArray(array, chunkSize) {\n      var newArray = [];\n\n      for (var i = 0; i < array.length; i += chunkSize) {\n        newArray.push(array.slice(i, i + chunkSize));\n      }\n\n      return newArray;\n    }\n    /**\r\n     * Método utilizado para formatar valores numéricos\r\n     */\n\n  }, {\n    key: \"formataNumero\",\n    value: function formataNumero(_ref) {\n      var numero = _ref.numero,\n          _ref$casasDecimais = _ref.casasDecimais,\n          casasDecimais = _ref$casasDecimais === void 0 ? 2 : _ref$casasDecimais,\n          _ref$casasInteiras = _ref.casasInteiras,\n          casasInteiras = _ref$casasInteiras === void 0 ? 3 : _ref$casasInteiras,\n          _ref$delimitadorMilha = _ref.delimitadorMilhar,\n          delimitadorMilhar = _ref$delimitadorMilha === void 0 ? \".\" : _ref$delimitadorMilha,\n          _ref$delimitadorDecim = _ref.delimitadorDecimal,\n          delimitadorDecimal = _ref$delimitadorDecim === void 0 ? \",\" : _ref$delimitadorDecim;\n      var re = \"\\\\d(?=(\\\\d{\" + (casasInteiras || 3) + \"})+\" + (casasDecimais > 0 ? \"\\\\D\" : \"$\") + \")\";\n      var num = numero;\n\n      try {\n        num = numero.toFixed(Math.max(0, ~~casasDecimais));\n      } catch (err) {}\n\n      return (delimitadorDecimal ? num.replace(\".\", delimitadorDecimal) : num).replace(new RegExp(re, \"g\"), \"$&\" + (delimitadorMilhar || \",\"));\n    }\n  }]);\n\n  return Toolkit;\n}();\n\nexport { Toolkit as default };","map":{"version":3,"sources":["C:\\GIT\\loja_react_tap_2019.1\\src\\util\\Toolkit.js"],"names":["Toolkit","array","chunkSize","newArray","i","length","push","slice","numero","casasDecimais","casasInteiras","delimitadorMilhar","delimitadorDecimal","re","num","toFixed","Math","max","err","replace","RegExp"],"mappings":";;;IAAqBA,O;;;;;;;;;+BACDC,K,EAAOC,S,EAAW;AAClC,UAAIC,QAAQ,GAAG,EAAf;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,IAAIF,SAAvC,EAAkD;AAChDC,QAAAA,QAAQ,CAACG,IAAT,CAAcL,KAAK,CAACM,KAAN,CAAYH,CAAZ,EAAeA,CAAC,GAAGF,SAAnB,CAAd;AACD;;AAED,aAAOC,QAAP;AACD;AAED;;;;;;wCASG;AAAA,UALDK,MAKC,QALDA,MAKC;AAAA,oCAJDC,aAIC;AAAA,UAJDA,aAIC,mCAJe,CAIf;AAAA,oCAHDC,aAGC;AAAA,UAHDA,aAGC,mCAHe,CAGf;AAAA,uCAFDC,iBAEC;AAAA,UAFDA,iBAEC,sCAFmB,GAEnB;AAAA,uCADDC,kBACC;AAAA,UADDA,kBACC,sCADoB,GACpB;AACD,UAAIC,EAAE,GACJ,iBACCH,aAAa,IAAI,CADlB,IAEA,KAFA,IAGCD,aAAa,GAAG,CAAhB,GAAoB,KAApB,GAA4B,GAH7B,IAIA,GALF;AAOA,UAAIK,GAAG,GAAGN,MAAV;;AAEA,UAAI;AACFM,QAAAA,GAAG,GAAGN,MAAM,CAACO,OAAP,CAAeC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAC,CAACR,aAAd,CAAf,CAAN;AACD,OAFD,CAEE,OAAOS,GAAP,EAAY,CAAE;;AAEhB,aAAO,CAACN,kBAAkB,GACtBE,GAAG,CAACK,OAAJ,CAAY,GAAZ,EAAiBP,kBAAjB,CADsB,GAEtBE,GAFG,EAGLK,OAHK,CAGG,IAAIC,MAAJ,CAAWP,EAAX,EAAe,GAAf,CAHH,EAGwB,QAAQF,iBAAiB,IAAI,GAA7B,CAHxB,CAAP;AAID;;;;;;SAtCkBX,O","sourcesContent":["export default class Toolkit {\r\n  static splitArray(array, chunkSize) {\r\n    let newArray = [];\r\n\r\n    for (let i = 0; i < array.length; i += chunkSize) {\r\n      newArray.push(array.slice(i, i + chunkSize));\r\n    }\r\n\r\n    return newArray;\r\n  }\r\n\r\n  /**\r\n   * Método utilizado para formatar valores numéricos\r\n   */\r\n  static formataNumero({\r\n    numero,\r\n    casasDecimais = 2,\r\n    casasInteiras = 3,\r\n    delimitadorMilhar = \".\",\r\n    delimitadorDecimal = \",\"\r\n  }) {\r\n    let re =\r\n      \"\\\\d(?=(\\\\d{\" +\r\n      (casasInteiras || 3) +\r\n      \"})+\" +\r\n      (casasDecimais > 0 ? \"\\\\D\" : \"$\") +\r\n      \")\";\r\n      \r\n    let num = numero;\r\n\r\n    try {\r\n      num = numero.toFixed(Math.max(0, ~~casasDecimais));\r\n    } catch (err) {}\r\n\r\n    return (delimitadorDecimal\r\n      ? num.replace(\".\", delimitadorDecimal)\r\n      : num\r\n    ).replace(new RegExp(re, \"g\"), \"$&\" + (delimitadorMilhar || \",\"));\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}