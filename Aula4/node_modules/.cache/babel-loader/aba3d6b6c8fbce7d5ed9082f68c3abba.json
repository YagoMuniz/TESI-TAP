{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\n\nvar BancoDeDados = function BancoDeDados() {\n  _classCallCheck(this, BancoDeDados);\n};\n\nBancoDeDados.getProdutos =\n/*#__PURE__*/\n_asyncToGenerator(\n/*#__PURE__*/\n_regeneratorRuntime.mark(function _callee() {\n  var response, produtos;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch('http://localhost:9000/produtos');\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return response.json();\n\n        case 5:\n          produtos = _context.sent;\n\n          if (!(response.status !== 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(produtos.message);\n\n        case 8:\n          return _context.abrupt(\"return\", produtos.map(function (p) {\n            return _objectSpread({}, p, {\n              preco: parseFloat(p.preco)\n            });\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nexport default BancoDeDados;","map":{"version":3,"sources":["C:\\GIT\\loja_react_tap_2019.1\\src\\bd\\BancoDeDados.js"],"names":["BancoDeDados","getProdutos","fetch","response","json","produtos","status","Error","message","map","p","preco","parseFloat"],"mappings":";;;;;IAAMA,Y;;;;AAAAA,Y,CACKC,W;;;;yBAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACMC,KAAK,CAAC,gCAAD,CADX;;AAAA;AACXC,UAAAA,QADW;AAAA;AAAA,iBAEMA,QAAQ,CAACC,IAAT,EAFN;;AAAA;AAEXC,UAAAA,QAFW;;AAAA,gBAIbF,QAAQ,CAACG,MAAT,KAAoB,GAJP;AAAA;AAAA;AAAA;;AAAA,gBAKP,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,OAAnB,CALO;;AAAA;AAAA,2CAWVH,QAAQ,CAACI,GAAT,CAAa,UAACC,CAAD,EAAO;AACvB,qCAAWA,CAAX;AAAcC,cAAAA,KAAK,EAAEC,UAAU,CAACF,CAAC,CAACC,KAAH;AAA/B;AACH,WAFM,CAXU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;AAiBzB,eAAeX,YAAf","sourcesContent":["class BancoDeDados {\r\n    static getProdutos = async () => {\r\n        const response = await fetch('http://localhost:9000/produtos');\r\n        const produtos = await response.json();\r\n\r\n        if (response.status !== 200) {\r\n            throw new Error(produtos.message);\r\n        }\r\n\r\n        // Aqui nós podemos realizar conversões do modelo que vem bo back-end\r\n        // para as necessidades do front-end. \r\n        // Nesse caso, o campo \"preco\" vem como string, então convertemos para float\r\n        return produtos.map((p) => {\r\n            return {...p, preco: parseFloat(p.preco)}\r\n        });\r\n    }\r\n}\r\n\r\nexport default BancoDeDados;"]},"metadata":{},"sourceType":"module"}