{"ast":null,"code":"import _classCallCheck from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\GIT\\\\loja_react_tap_2019.1\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n\nvar Toolkit =\n/*#__PURE__*/\nfunction () {\n  function Toolkit() {\n    _classCallCheck(this, Toolkit);\n  }\n\n  _createClass(Toolkit, null, [{\n    key: \"splitArray\",\n    value: function splitArray(array, chunkSize) {\n      var newArray = [];\n\n      for (var i = 0; i < array.length; i += chunkSize) {\n        newArray.push(array.slice(i, i + chunkSize));\n      }\n\n      return newArray;\n    }\n    /**\r\n     * Método utilizado para formatar valores numéricos\r\n     * \r\n     * @param integer numero: valor a ser formatado\r\n     * @param integer n:      casas decimais\r\n     * @param integer x:      tamanho da parte inteira\r\n     * @param mixed   s:      delimitador de milhar\r\n     * @param mixed   c:      delimitador decimal\r\n    */\n\n  }, {\n    key: \"formataNumero\",\n    value: function formataNumero(numero, n, x, s, c) {\n      var re = '\\\\d(?=(\\\\d{' + (x || 3) + '})+' + (n > 0 ? '\\\\D' : '$') + ')';\n      var num = numero.toFixed(Math.max(0, ~~n));\n      return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));\n    }\n  }]);\n\n  return Toolkit;\n}();\n\nexport { Toolkit as default };","map":{"version":3,"sources":["C:\\GIT\\loja_react_tap_2019.1\\src\\util\\Toolkit.js"],"names":["Toolkit","array","chunkSize","newArray","i","length","push","slice","numero","n","x","s","c","re","num","toFixed","Math","max","replace","RegExp"],"mappings":";;;IAAqBA,O;;;;;;;;;+BACCC,K,EAAOC,S,EAAW;AAChC,UAAIC,QAAQ,GAAG,EAAf;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,IAAIF,SAAvC,EAAkD;AAChDC,QAAAA,QAAQ,CAACG,IAAT,CAAcL,KAAK,CAACM,KAAN,CAAYH,CAAZ,EAAeA,CAAC,GAAGF,SAAnB,CAAd;AACD;;AAED,aAAOC,QAAP;AACH;AAED;;;;;;;;;;;;kCASqBK,M,EAAQC,C,EAAGC,C,EAAGC,C,EAAGC,C,EAAG;AACvC,UAAIC,EAAE,GAAG,iBAAiBH,CAAC,IAAI,CAAtB,IAA2B,KAA3B,IAAoCD,CAAC,GAAG,CAAJ,GAAQ,KAAR,GAAgB,GAApD,IAA2D,GAApE;AACA,UAAIK,GAAG,GAAGN,MAAM,CAACO,OAAP,CAAeC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,CAAC,CAACR,CAAd,CAAf,CAAV;AAEA,aAAO,CAACG,CAAC,GAAGE,GAAG,CAACI,OAAJ,CAAY,GAAZ,EAAiBN,CAAjB,CAAH,GAAyBE,GAA3B,EAAgCI,OAAhC,CAAwC,IAAIC,MAAJ,CAAWN,EAAX,EAAe,GAAf,CAAxC,EAA6D,QAAQF,CAAC,IAAI,GAAb,CAA7D,CAAP;AACD;;;;;;SAzBgBX,O","sourcesContent":["export default class Toolkit {\r\n    static splitArray(array, chunkSize) {\r\n        let newArray = [];\r\n\r\n        for (let i = 0; i < array.length; i += chunkSize) {\r\n          newArray.push(array.slice(i, i + chunkSize));\r\n        }\r\n\r\n        return newArray;\r\n    }\r\n\r\n    /**\r\n     * Método utilizado para formatar valores numéricos\r\n     * \r\n     * @param integer numero: valor a ser formatado\r\n     * @param integer n:      casas decimais\r\n     * @param integer x:      tamanho da parte inteira\r\n     * @param mixed   s:      delimitador de milhar\r\n     * @param mixed   c:      delimitador decimal\r\n    */\r\n    static formataNumero(numero, n, x, s, c) {\r\n      let re = '\\\\d(?=(\\\\d{' + (x || 3) + '})+' + (n > 0 ? '\\\\D' : '$') + ')';\r\n      let num = numero.toFixed(Math.max(0, ~~n));\r\n  \r\n      return (c ? num.replace('.', c) : num).replace(new RegExp(re, 'g'), '$&' + (s || ','));\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}